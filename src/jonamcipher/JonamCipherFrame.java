/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jonamcipher;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Manoj_nilanga
 */
public class JonamCipherFrame extends javax.swing.JFrame {
    private String encryptedFullText;
    private String key;
    private String oraginalAlphabet[] = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," ","."};
    private String alphabet[];
    private String alphabetZero[]={"m","q","l","c","s","p","k","u","v","h","a","y","g"," ","z","t","f","b","n","e","x","r","w","d","o","j",".","i"};
    private String alphabetOne[]={"e","m","s","x","n"," ","a","r","f","j","c","g","t","y","b",".","o","i","w","u","h","p","z","l","q","v","k","d"};
    private String alphabetTwo[]={" ","a","t","h","o",".","l","s","j","c","n","i","g","z","x","m","p","u","b","w","k","y","q","v","r","d","e","f"};
    private String alphabetThree[]={"b","h","r","l",".","f","p","j","u","w","c","x","n","s","g","k","m","e","q"," ","a","z","y","o","t","v","i","d"};
    private String alphabetFour[]={"d"," ","g","l","q","t","c","x","v","k",".","w","e","n","r","j","m","f","a","u","s","y","z","h","o","b","i","p"};
    private String decryptedFullText;
    
    

    /**
     * Creates new form JonamCipherFrame
     */
    public JonamCipherFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtInput = new javax.swing.JTextField();
        txtOutput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtKey = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(400, 300));
        setResizable(false);

        txtInput.setText("G:\\JonamCipher\\src\\jonamcipher\\plain.txt");
        txtInput.setName("txtInput"); // NOI18N
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        txtOutput.setText("G:\\JonamCipher\\src\\jonamcipher\\cipher.txt");
        txtOutput.setName("txtOutput"); // NOI18N

        jLabel1.setText("Input file path :");

        jLabel2.setText("Output file path :");

        jButton1.setText("Encrypt");
        jButton1.setName("cmdEncrypt"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.setName("cmdDecrypt"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Key :");

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 1, 30)); // NOI18N
        jLabel4.setText("Jonam Cipher");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtOutput)
                            .addComponent(txtInput))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        setKey();
        FileWriter fileWriter = null;
        String fullText = ""; 
        
        try {
            FileReader fileReader = null;
            try {
                // The name of the file to open.
                String inputFileName = txtInput.getText();
                // This will reference one line at a time
                String line = null;
                // TODO add your handling code here:
                fileReader = new FileReader(inputFileName);
                // Always wrap FileReader in BufferedReader.
                BufferedReader bufferedReader =
                        new BufferedReader(fileReader);
                while((line = bufferedReader.readLine()) != null) {
                    fullText = fullText +" "+ line;
                    
                }
                // Always close files.
                bufferedReader.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fileReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
                }                                
            }
            
            encryptedFullText = encrypt(fullText);
//            System.out.println(encryptedFullText);
            
            String outputFileName = txtOutput.getText();
            fileWriter = new FileWriter(outputFileName);
            // Always wrap FileWriter in BufferedWriter.
            BufferedWriter bufferedWriter =
                    new BufferedWriter(fileWriter);
            // Note that write() does not automatically
            // append a newline character.
            bufferedWriter.write(encryptedFullText);
            
            // Always close files.
            bufferedWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setKey();
        FileWriter fileWriter = null;
        String encFullText = ""; 
        
        try {
            FileReader fileReader = null;
            try {
                // The name of the file to open.
                String inputFileName = txtInput.getText();
                // This will reference one line at a time
                String line = null;
                // TODO add your handling code here:
                fileReader = new FileReader(inputFileName);
                // Always wrap FileReader in BufferedReader.
                BufferedReader bufferedReader =
                        new BufferedReader(fileReader);
                while((line = bufferedReader.readLine()) != null) {
                    encFullText = encFullText +" "+ line;
                    
                }
                // Always close files.
                bufferedReader.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fileReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
                }                                
            }
            
            decryptedFullText = decrypt(encFullText);
//            System.out.println(decryptedFullText);
            
            String outputFileName = txtOutput.getText();
            fileWriter = new FileWriter(outputFileName);
            // Always wrap FileWriter in BufferedWriter.
            BufferedWriter bufferedWriter =
                    new BufferedWriter(fileWriter);
            // Note that write() does not automatically
            // append a newline character.
            bufferedWriter.write(decryptedFullText);
            
            // Always close files.
            bufferedWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(JonamCipherFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed
    private String decrypt(String fullText){
        String decryptedString = "" ;
        String[] arrFullText = fullText.split("");
        for (int x=1;x<arrFullText.length;x++){
            for (int j=0;j<28;j++){
                if (arrFullText[x].equals(alphabet[j]) ){
                    decryptedString = decryptedString+oraginalAlphabet[j];
                }
            }
            
        }
        
       
        return decryptedString;
    }
    private String encrypt(String fullText){
        String encryptedString = "" ;
        String[] arrFullText = fullText.split("");
        for (int x=1;x<arrFullText.length;x++){
            for (int j=0;j<28;j++){
                if (arrFullText[x].equals(oraginalAlphabet[j]) ){
                    encryptedString = encryptedString+alphabet[j];
                }
            }
            
        }
        
       
        return encryptedString;
    }
    
    private void setKey(){
        int intKey;
        int alp;
        key = txtKey.getText();
        intKey = Integer.parseInt(key);
        alp = intKey%5;
        if (alp==0){
            alphabet = alphabetZero;
        }else if(alp==1){
            alphabet = alphabetOne;
        }else if(alp==2){
            alphabet = alphabetTwo;
        }else if(alp==3){
            alphabet = alphabetThree;
        }else{
            alphabet = alphabetFour;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JonamCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JonamCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JonamCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JonamCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JonamCipherFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables
}
